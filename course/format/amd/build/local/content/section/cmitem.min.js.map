{"version":3,"file":"cmitem.min.js","sources":["../../../../src/local/content/section/cmitem.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course course module item component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/content/section/cmitem\n * @class      core_courseformat/local/content/section/cmitem\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\n\nexport default class extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_section_cmitem';\n        // Default query selectors.\n        this.selectors = {\n            BULKSELECT: `[data-for='cmBulkSelect']`,\n            BULKCHECKBOX: `[data-bulkcheckbox]`,\n            CARD: `.activity-item`,\n            DRAGICON: `.editing_move`,\n            INPLACEEDITABLE: `[data-inplaceeditablelink]`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            LOCKED: 'editinprogress',\n            HIDE: 'd-none',\n            SELECTED: 'selected',\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Initial state ready method.\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        this.getElement(this.selectors.DRAGICON)?.classList.add(this.classes.DRAGICON);\n        this._refreshBulk({state});\n        this.addEventListener(this.element, 'click', this._handleBulkModeClick);\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.unregister},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `bulk:updated`, handler: this._refreshBulk},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Update the bulk editing interface.\n     *\n     * @param {object} param\n     * @param {Object} param.state the state data\n     */\n    _refreshBulk({state}) {\n        const bulk = state.bulk;\n        // For now, dragging elements in bulk is not possible.\n        this.setDraggable(!bulk.enabled);\n\n        this.getElement(this.selectors.BULKSELECT)?.classList.toggle(this.classes.HIDE, !bulk.enabled);\n\n        const disabled = !this._isCmBulkEnabled(bulk);\n        const selected = this._isSelected(bulk);\n        this._refreshActivityCard(bulk, selected);\n        this._setCheckboxValue(selected, disabled);\n    }\n\n    /**\n     * Update the activity card depending on the bulk selection.\n     *\n     * @param {Object} bulk the current bulk state data\n     * @param {Boolean} selected if the activity is selected.\n     */\n    _refreshActivityCard(bulk, selected) {\n        this.getElement(this.selectors.INPLACEEDITABLE)?.classList.toggle(this.classes.HIDE, bulk.enabled);\n        this.getElement(this.selectors.CARD)?.classList.toggle(this.classes.SELECTED, selected);\n        this.element.classList.toggle(this.classes.SELECTED, selected);\n    }\n\n    /**\n     * Modify the checkbox element.\n     * @param {Boolean} checked the new checked value\n     * @param {Boolean} disabled the new disabled value\n     */\n    _setCheckboxValue(checked, disabled) {\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\n        if (!checkbox) {\n            return;\n        }\n        checkbox.checked = checked;\n        checkbox.disabled = disabled;\n        // Is selectable is used to easily scan the page for bulk checkboxes.\n        if (disabled) {\n            checkbox.removeAttribute('data-is-selectable');\n        } else {\n            checkbox.dataset.isSelectable = 1;\n        }\n    }\n\n    /**\n     * Handle the activity card click in bulk mode.\n     * @param {Event} event the click event\n     */\n    _handleBulkModeClick(event) {\n        const selectElement = event.target.closest(this.selectors.BULKSELECT);\n        if (selectElement) {\n            // The select element checkbox execute a normal content action as\n            // any regular action button. This is because the chengechecker module\n            // is sniffing any form element and will with the checked value\n            // changing it twice.\n            return;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (!this._isCmBulkEnabled(bulk)) {\n            return;\n        }\n        event.preventDefault();\n        const mutation = (this._isSelected(bulk)) ? 'cmUnselect' : 'cmSelect';\n        this.reactive.dispatch(mutation, [this.id]);\n    }\n\n    /**\n     * Check if cm bulk selection is available.\n     * @param {Object} bulk the current state bulk attribute\n     * @returns {Boolean}\n     */\n    _isCmBulkEnabled(bulk) {\n        if (!bulk.enabled) {\n            return false;\n        }\n        return (bulk.selectedType === '' || bulk.selectedType === 'cm');\n    }\n\n    /**\n     * Check if the cm id is part of the current bulk selection.\n     * @param {Object} bulk the current state bulk attribute\n     * @returns {Boolean}\n     */\n    _isSelected(bulk) {\n        if (bulk.selectedType !== 'cm') {\n            return false;\n        }\n        return bulk.selection.includes(this.id);\n    }\n}\n"],"names":["DndCmItem","create","name","selectors","BULKSELECT","BULKCHECKBOX","CARD","DRAGICON","INPLACEEDITABLE","classes","LOCKED","HIDE","SELECTED","id","this","element","dataset","stateReady","state","configDragDrop","getElement","classList","add","_refreshBulk","addEventListener","_handleBulkModeClick","getWatchers","watch","handler","unregister","_refreshCm","toggle","DRAGGING","dragging","locked","bulk","setDraggable","enabled","disabled","_isCmBulkEnabled","selected","_isSelected","_refreshActivityCard","_setCheckboxValue","checked","checkbox","removeAttribute","isSelectable","event","target","closest","reactive","get","preventDefault","mutation","dispatch","selectedType","selection","includes"],"mappings":";;;;;;;;;;0KA4B6BA,mBAKzBC,cAESC,KAAO,8BAEPC,UAAY,CACbC,uCACAC,mCACAC,sBACAC,yBACAC,mDAGCC,QAAU,CACXC,OAAQ,iBACRC,KAAM,SACNC,SAAU,iBAGTC,GAAKC,KAAKC,QAAQC,QAAQH,GAOnCI,WAAWC,iCACFC,eAAeL,KAAKD,kCACpBO,WAAWN,KAAKX,UAAUI,wDAAWc,UAAUC,IAAIR,KAAKL,QAAQF,eAChEgB,aAAa,CAACL,MAAAA,aACdM,iBAAiBV,KAAKC,QAAS,QAASD,KAAKW,sBAQtDC,oBACW,CACH,CAACC,mBAAab,KAAKD,gBAAee,QAASd,KAAKe,YAChD,CAACF,mBAAab,KAAKD,gBAAee,QAASd,KAAKgB,YAChD,CAACH,qBAAuBC,QAASd,KAAKS,eAU9CO,2DAAWf,QAACA,mBAEHA,QAAQM,UAAUU,OAAOjB,KAAKL,QAAQuB,mCAAUjB,QAAQkB,+DACxDlB,QAAQM,UAAUU,OAAOjB,KAAKL,QAAQC,+BAAQK,QAAQmB,yDACtDA,OAASnB,QAAQmB,OAS1BX,8CAAaL,MAACA,mBACJiB,KAAOjB,MAAMiB,UAEdC,cAAcD,KAAKE,wCAEnBjB,WAAWN,KAAKX,UAAUC,4DAAaiB,UAAUU,OAAOjB,KAAKL,QAAQE,MAAOwB,KAAKE,eAEhFC,UAAYxB,KAAKyB,iBAAiBJ,MAClCK,SAAW1B,KAAK2B,YAAYN,WAC7BO,qBAAqBP,KAAMK,eAC3BG,kBAAkBH,SAAUF,UASrCI,qBAAqBP,KAAMK,iFAClBpB,WAAWN,KAAKX,UAAUK,iEAAkBa,UAAUU,OAAOjB,KAAKL,QAAQE,KAAMwB,KAAKE,wCACrFjB,WAAWN,KAAKX,UAAUG,sDAAOe,UAAUU,OAAOjB,KAAKL,QAAQG,SAAU4B,eACzEzB,QAAQM,UAAUU,OAAOjB,KAAKL,QAAQG,SAAU4B,UAQzDG,kBAAkBC,QAASN,gBACjBO,SAAW/B,KAAKM,WAAWN,KAAKX,UAAUE,cAC3CwC,WAGLA,SAASD,QAAUA,QACnBC,SAASP,SAAWA,SAEhBA,SACAO,SAASC,gBAAgB,sBAEzBD,SAAS7B,QAAQ+B,aAAe,GAQxCtB,qBAAqBuB,UACKA,MAAMC,OAAOC,QAAQpC,KAAKX,UAAUC,yBAQpD+B,KAAOrB,KAAKqC,SAASC,IAAI,YAC1BtC,KAAKyB,iBAAiBJ,aAG3Ba,MAAMK,uBACAC,SAAYxC,KAAK2B,YAAYN,MAAS,aAAe,gBACtDgB,SAASI,SAASD,SAAU,CAACxC,KAAKD,KAQ3C0B,iBAAiBJ,cACRA,KAAKE,UAGoB,KAAtBF,KAAKqB,cAA6C,OAAtBrB,KAAKqB,cAQ7Cf,YAAYN,YACkB,OAAtBA,KAAKqB,cAGFrB,KAAKsB,UAAUC,SAAS5C,KAAKD"}