{"version":3,"file":"bulkedittools.min.js","sources":["../../../src/local/content/bulkedittools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The bulk editor tools bar.\n *\n * @module     core_courseformat/local/content/bulkedittools\n * @class      core_courseformat/local/content/bulkedittools\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {disableStickyFooter, enableStickyFooter} from 'core/sticky-footer';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\n\n// Load global strings.\nprefetchStrings(\n    'core_courseformat',\n    ['bulkselection']\n);\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'bulk_editor_tools';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONS: `[data-for=\"bulkaction\"]`,\n            ACTIONTOOL: `[data-for=\"bulkactions\"] li`,\n            CANCEL: `[data-for=\"bulkcancel\"]`,\n            COUNT: `[data-for='bulkcount']`,\n            SELECTABLE: `[data-bulkcheckbox][data-is-selectable]`,\n            SELECTALL: `[data-for=\"selectall\"]`,\n            BULKBTN: `[data-for=\"enableBulk\"]`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            HIDE: 'd-none',\n            DISABLED: 'disabled',\n        };\n    }\n\n    /**\n     * Static method to create a component instance from the mustache template.\n     *\n     * @param {string} target optional altentative DOM main element CSS selector\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: getCurrentCourseEditor(),\n            selectors\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        const cancelBtn = this.getElement(this.selectors.CANCEL);\n        if (cancelBtn) {\n            this.addEventListener(cancelBtn, 'click', this._cancelBulk);\n        }\n        const selectAll = this.getElement(this.selectors.SELECTALL);\n        if (selectAll) {\n            this.addEventListener(selectAll, 'change', this._selectAllClick);\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `bulk.enabled:updated`, handler: this._refreshEnabled},\n            {watch: `bulk:updated`, handler: this._refreshTools},\n        ];\n    }\n\n    /**\n     * Hide and show the bulk edit tools.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details (state.bulk in this case).\n     */\n    _refreshEnabled({element}) {\n        if (element.enabled) {\n            enableStickyFooter();\n        } else {\n            disableStickyFooter();\n        }\n    }\n\n    /**\n     * Refresh the tools depending on the current selection.\n     *\n     * @param {object} param the state watcher information\n     * @param {Object} param.state the full state data.\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshTools(param) {\n        this._refreshSelectCount(param);\n        this._refreshSelectAll(param);\n        this._refreshActions(param);\n    }\n\n    /**\n     * Refresh the selection count.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    async _refreshSelectCount({element: bulk}) {\n        const selectedCount = await getString('bulkselection', 'core_courseformat', bulk.selection.length);\n        const selectedElement = this.getElement(this.selectors.COUNT);\n        if (selectedElement) {\n            selectedElement.innerHTML = selectedCount;\n        }\n    }\n\n    /**\n     * Refresh the select all element.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshSelectAll({element: bulk}) {\n        const selectall = this.getElement(this.selectors.SELECTALL);\n        if (!selectall) {\n            return;\n        }\n        if (bulk.selectedType === '') {\n            selectall.checked = false;\n            selectall.disabled = true;\n            return;\n        }\n\n        selectall.disabled = false;\n        const maxSelection = document.querySelectorAll(this.selectors.SELECTABLE).length;\n        selectall.checked = (bulk.selection.length == maxSelection);\n    }\n\n    /**\n     * Refresh the visible action buttons depending on the selection type.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshActions({element: bulk}) {\n        // By default, we show the cm options.\n        const displayType = (bulk.selectedType == 'section') ? 'section' : 'cm';\n        const enabled = (bulk.selectedType !== '');\n        this.getElements(this.selectors.ACTIONS).forEach(action => {\n            action.classList.toggle(this.classes.DISABLED, !enabled);\n\n            const actionTool = action.closest(this.selectors.ACTIONTOOL);\n            const isHidden = (action.dataset.bulk != displayType);\n            actionTool?.classList.toggle(this.classes.HIDE, isHidden);\n        });\n    }\n\n    /**\n     * Cancel bulk handler.\n     */\n    _cancelBulk() {\n        const pending = new Pending(`courseformat/content:bulktoggle_off`);\n        this.reactive.dispatch('bulkEnable', false);\n        // Wait for a while and focus on enable bulk button.\n        setTimeout(() => {\n            document.querySelector(this.selectors.BULKBTN)?.focus();\n            pending.resolve();\n        }, 150);\n    }\n\n    /**\n     * Select all elements click handler.\n     * @param {Event} event\n     */\n    _selectAllClick(event) {\n        const target = event.target;\n        const bulk = this.reactive.get('bulk');\n        if (bulk.selectedType === '') {\n            return;\n        }\n        if (!target.checked) {\n            this._handleUnselectAll();\n            return;\n        }\n        this._handleSelectAll(bulk);\n    }\n\n    /**\n     * Process unselect all elements.\n     */\n    _handleUnselectAll() {\n        const pending = new Pending(`courseformat/content:bulktUnselectAll`);\n        // Re-enable bulk will clean the selection and the selection type.\n        this.reactive.dispatch('bulkEnable', true);\n        // Wait for a while and focus on the first checkbox.\n        setTimeout(() => {\n            document.querySelector(this.selectors.SELECTABLE)?.focus();\n            pending.resolve();\n        }, 150);\n    }\n\n    /**\n     * Process a select all selectable elements.\n     * @param {Object} bulk the state bulk data\n     * @param {String} bulk.selectedType the current selected type (section/cm)\n     */\n    _handleSelectAll(bulk) {\n        const selectableIds = [];\n        const selectables = document.querySelectorAll(this.selectors.SELECTABLE);\n        if (selectables.length == 0) {\n            return;\n        }\n        selectables.forEach(selectable => {\n            selectableIds.push(selectable.dataset.id);\n        });\n        const mutation = (bulk.selectedType === 'cm') ? 'cmSelect' : 'sectionSelect';\n        this.reactive.dispatch(mutation, selectableIds);\n    }\n}\n"],"names":["Component","BaseComponent","create","name","selectors","ACTIONS","ACTIONTOOL","CANCEL","COUNT","SELECTABLE","SELECTALL","BULKBTN","classes","HIDE","DISABLED","target","this","element","document","querySelector","reactive","stateReady","cancelBtn","getElement","addEventListener","_cancelBulk","selectAll","_selectAllClick","getWatchers","watch","handler","_refreshEnabled","_refreshTools","enabled","param","_refreshSelectCount","_refreshSelectAll","_refreshActions","bulk","selectedCount","selection","length","selectedElement","innerHTML","selectall","selectedType","checked","disabled","maxSelection","querySelectorAll","displayType","getElements","forEach","action","classList","toggle","actionTool","closest","isHidden","dataset","pending","Pending","dispatch","setTimeout","focus","resolve","event","get","_handleSelectAll","_handleUnselectAll","selectableIds","selectables","selectable","push","id","mutation"],"mappings":";;;;;;;;6KAiCI,oBACA,CAAC,wBAGgBA,kBAAkBC,wBAKnCC,cAESC,KAAO,yBAEPC,UAAY,CACbC,kCACAC,yCACAC,iCACAC,+BACAC,qDACAC,mCACAC,wCAGCC,QAAU,CACXC,KAAM,SACNC,SAAU,wBAWNC,OAAQX,kBACT,IAAIY,KAAK,CACZC,QAASC,SAASC,cAAcJ,QAChCK,UAAU,0CACVhB,UAAAA,YAORiB,mBACUC,UAAYN,KAAKO,WAAWP,KAAKZ,UAAUG,QAC7Ce,gBACKE,iBAAiBF,UAAW,QAASN,KAAKS,mBAE7CC,UAAYV,KAAKO,WAAWP,KAAKZ,UAAUM,WAC7CgB,gBACKF,iBAAiBE,UAAW,SAAUV,KAAKW,iBASxDC,oBACW,CACH,CAACC,6BAA+BC,QAASd,KAAKe,iBAC9C,CAACF,qBAAuBC,QAASd,KAAKgB,gBAU9CD,0BAAgBd,QAACA,cACTA,QAAQgB,uFAchBD,cAAcE,YACLC,oBAAoBD,YACpBE,kBAAkBF,YAClBG,gBAAgBH,4CASEjB,QAASqB,kBAC1BC,oBAAsB,mBAAU,gBAAiB,oBAAqBD,KAAKE,UAAUC,QACrFC,gBAAkB1B,KAAKO,WAAWP,KAAKZ,UAAUI,OACnDkC,kBACAA,gBAAgBC,UAAYJ,eAUpCH,6BAAmBnB,QAASqB,kBAClBM,UAAY5B,KAAKO,WAAWP,KAAKZ,UAAUM,eAC5CkC,oBAGqB,KAAtBN,KAAKO,oBACLD,UAAUE,SAAU,OACpBF,UAAUG,UAAW,GAIzBH,UAAUG,UAAW,QACfC,aAAe9B,SAAS+B,iBAAiBjC,KAAKZ,UAAUK,YAAYgC,OAC1EG,UAAUE,QAAWR,KAAKE,UAAUC,QAAUO,aASlDX,2BAAiBpB,QAASqB,kBAEhBY,YAAoC,WAArBZ,KAAKO,aAA6B,UAAY,KAC7DZ,QAAiC,KAAtBK,KAAKO,kBACjBM,YAAYnC,KAAKZ,UAAUC,SAAS+C,SAAQC,SAC7CA,OAAOC,UAAUC,OAAOvC,KAAKJ,QAAQE,UAAWmB,eAE1CuB,WAAaH,OAAOI,QAAQzC,KAAKZ,UAAUE,YAC3CoD,SAAYL,OAAOM,QAAQrB,MAAQY,YACzCM,MAAAA,YAAAA,WAAYF,UAAUC,OAAOvC,KAAKJ,QAAQC,KAAM6C,aAOxDjC,oBACUmC,QAAU,IAAIC,6DACfzC,SAAS0C,SAAS,cAAc,GAErCC,YAAW,6DACP7C,SAASC,cAAcH,KAAKZ,UAAUO,iEAAUqD,QAChDJ,QAAQK,YACT,KAOPtC,gBAAgBuC,aACNnD,OAASmD,MAAMnD,OACfuB,KAAOtB,KAAKI,SAAS+C,IAAI,QACL,KAAtB7B,KAAKO,eAGJ9B,OAAO+B,aAIPsB,iBAAiB9B,WAHb+B,sBASbA,2BACUT,QAAU,IAAIC,+DAEfzC,SAAS0C,SAAS,cAAc,GAErCC,YAAW,+DACP7C,SAASC,cAAcH,KAAKZ,UAAUK,sEAAauD,QACnDJ,QAAQK,YACT,KAQPG,iBAAiB9B,YACPgC,cAAgB,GAChBC,YAAcrD,SAAS+B,iBAAiBjC,KAAKZ,UAAUK,eACnC,GAAtB8D,YAAY9B,cAGhB8B,YAAYnB,SAAQoB,aAChBF,cAAcG,KAAKD,WAAWb,QAAQe,aAEpCC,SAAkC,OAAtBrC,KAAKO,aAAyB,WAAa,qBACxDzB,SAAS0C,SAASa,SAAUL"}