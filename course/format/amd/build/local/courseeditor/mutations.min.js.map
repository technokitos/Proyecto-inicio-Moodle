{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Execute a basic section state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} sectionIds the section ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _sectionBasicAction(stateManager, action, sectionIds, targetSectionId, targetCmId) {\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            sectionIds,\n            targetSectionId,\n            targetCmId\n        );\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Execute a basic course module state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} cmIds the cm ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _cmBasicAction(stateManager, action, cmIds, targetSectionId, targetCmId) {\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            cmIds,\n            targetSectionId,\n            targetCmId\n        );\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmIds, false);\n    }\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is comming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Hides sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionHide(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_hide', sectionIds);\n    }\n\n    /**\n     * Show sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionShow(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_show', sectionIds);\n    }\n\n    /**\n     * Show cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmShow(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_show', cmIds);\n    }\n\n    /**\n     * Hide cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmHide(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_hide', cmIds);\n    }\n\n    /**\n     * Stealth cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmStealth(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_stealth', cmIds);\n    }\n\n    /**\n     * Duplicate course modules\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {number|undefined} targetSectionId the optional target sectionId\n     * @param {number|undefined} targetCmId the target course module id\n     */\n    async cmDuplicate(stateManager, cmIds, targetSectionId, targetCmId) {\n        const course = stateManager.get('course');\n        // Lock all target sections.\n        const sectionIds = new Set();\n        if (targetSectionId) {\n            sectionIds.add(targetSectionId);\n        } else {\n            cmIds.forEach((cmId) => {\n                const cm = stateManager.get('cm', cmId);\n                sectionIds.add(cm.sectionid);\n            });\n        }\n        this.sectionLock(stateManager, Array.from(sectionIds), true);\n\n        const updates = await this._callEditWebservice('cm_duplicate', course.id, cmIds, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n\n        this.sectionLock(stateManager, Array.from(sectionIds), false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of section ids\n     */\n    async cmDelete(stateManager, cmIds) {\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice('cm_delete', course.id, cmIds);\n        this.cmLock(stateManager, cmIds, false);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Update the course index collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionIndexCollapsed(stateManager, sectionIds, collapsed) {\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'indexcollapsed', sectionIds, collapsed);\n        const course = stateManager.get('course');\n        await this._callEditWebservice('section_index_collapsed', course.id, collapsedIds);\n    }\n\n    /**\n     * Update the course content collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionContentCollapsed(stateManager, sectionIds, collapsed) {\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'contentcollapsed', sectionIds, collapsed);\n        const course = stateManager.get('course');\n        await this._callEditWebservice('section_content_collapsed', course.id, collapsedIds);\n    }\n\n    /**\n     * Private batch update for a section preference attribute.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} preferenceName the preference name\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} preferenceValue the new preferenceValue value\n     * @return {array} the list of all sections with that preference set to true\n     */\n    _updateStateSectionPreference(stateManager, preferenceName, sectionIds, preferenceValue) {\n        stateManager.setReadOnly(false);\n        const affectedSections = new Set();\n        // Check if we need to update preferences.\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return;\n            }\n            const newValue = preferenceValue ?? section[preferenceName];\n            if (section[preferenceName] != newValue) {\n                section[preferenceName] = newValue;\n                affectedSections.add(section.id);\n            }\n        });\n        stateManager.setReadOnly(true);\n        if (affectedSections.size == 0) {\n            return [];\n        }\n        // Get all collapsed section ids.\n        const collapsedSectionIds = [];\n        const state = stateManager.state;\n        state.section.forEach(section => {\n            if (section[preferenceName]) {\n                collapsedSectionIds.push(section.id);\n            }\n        });\n        return collapsedSectionIds;\n    }\n\n    /**\n     * Enable/disable bulk editing.\n     *\n     * Note: reenabling the bulk will clean the current selection.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {Boolean} enabled the new bulk state.\n     */\n    bulkEnable(stateManager, enabled) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.bulk.enabled = enabled;\n        state.bulk.selectedType = '';\n        state.bulk.selection = [];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Reset the current selection.\n     * @param {StateManager} stateManager the current state manager\n     */\n    bulkReset(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.bulk.selectedType = '';\n        state.bulk.selection = [];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Select a list of cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    cmSelect(stateManager, cmIds) {\n        this._addIdsToSelection(stateManager, 'cm', cmIds);\n    }\n\n    /**\n     * Unselect a list of cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    cmUnselect(stateManager, cmIds) {\n        this._removeIdsFromSelection(stateManager, 'cm', cmIds);\n    }\n\n    /**\n     * Select a list of sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of cm ids\n     */\n    sectionSelect(stateManager, sectionIds) {\n        this._addIdsToSelection(stateManager, 'section', sectionIds);\n    }\n\n    /**\n     * Unselect a list of sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of cm ids\n     */\n    sectionUnselect(stateManager, sectionIds) {\n        this._removeIdsFromSelection(stateManager, 'section', sectionIds);\n    }\n\n    /**\n     * Add some ids to the current bulk selection.\n     * @param {StateManager} stateManager the current state manager\n     * @param {String} typeName the type name (section/cm)\n     * @param {array} ids the list of ids\n     */\n    _addIdsToSelection(stateManager, typeName, ids) {\n        const bulk = stateManager.state.bulk;\n        if (!bulk?.enabled) {\n            throw new Error(`Bulk is not enabled`);\n        }\n        if (bulk?.selectedType !== \"\" && bulk?.selectedType !== typeName) {\n            throw new Error(`Cannot add ${typeName} to the current selection`);\n        }\n\n        // Stored ids are strings for compatability with HTML data attributes.\n        ids = ids.map(value => value.toString());\n\n        stateManager.setReadOnly(false);\n        bulk.selectedType = typeName;\n        const newSelection = new Set([...bulk.selection, ...ids]);\n        bulk.selection = [...newSelection];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Remove some ids to the current bulk selection.\n     *\n     * The method resets the selection type if the current selection is empty.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String} typeName the type name (section/cm)\n     * @param {array} ids the list of ids\n     */\n    _removeIdsFromSelection(stateManager, typeName, ids) {\n        const bulk = stateManager.state.bulk;\n        if (!bulk?.enabled) {\n            throw new Error(`Bulk is not enabled`);\n        }\n        if (bulk?.selectedType !== \"\" && bulk?.selectedType !== typeName) {\n            throw new Error(`Cannot remove ${typeName} from the current selection`);\n        }\n\n        // Stored ids are strings for compatability with HTML data attributes.\n        ids = ids.map(value => value.toString());\n\n        stateManager.setReadOnly(false);\n        const IdsToFilter = new Set(ids);\n        bulk.selection = bulk.selection.filter(current => !IdsToFilter.has(current));\n        if (bulk.selection.length === 0) {\n            bulk.selectedType = '';\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"names":["action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajaxresult","ajax","call","methodname","JSON","parse","stateManager","sectionIds","course","get","sectionLock","updates","this","_callEditWebservice","id","processUpdates","cmIds","cmLock","init","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","_sectionBasicAction","_cmBasicAction","Set","add","forEach","cmId","cm","sectionid","Array","from","cmids","Error","cmDrag","dragValue","setPageItem","_setElementsValue","sectionDrag","cmCompletion","complete","newValue","lockValue","name","fieldName","setReadOnly","element","type","isStatic","newPageItem","undefined","pageItem","sectionId","unlockAll","state","section","collapsed","collapsedIds","_updateStateSectionPreference","preferenceName","preferenceValue","affectedSections","size","collapsedSectionIds","push","bulkEnable","enabled","bulk","selectedType","selection","bulkReset","cmSelect","_addIdsToSelection","cmUnselect","_removeIdsFromSelection","sectionSelect","sectionUnselect","typeName","map","value","toString","newSelection","IdsToFilter","filter","current","has","length"],"mappings":";;;;;;;;iMAuC8BA,OAAQC,SAAUC,IAAKC,gBAAiBC,kBACxDC,KAAO,CACTL,OAAAA,OACAM,SAAUL,SACVC,IAAAA,KAEAC,kBACAE,KAAKE,gBAAkBJ,iBAEvBC,aACAC,KAAKG,WAAaJ,gBAElBK,iBAAmBC,cAAKC,KAAK,CAAC,CAC9BC,WAAY,kCACZP,KAAAA,QACA,UACGQ,KAAKC,MAAML,sCAWIM,aAAcf,OAAQgB,WAAYb,gBAAiBC,kBACnEa,OAASF,aAAaG,IAAI,eAC3BC,YAAYJ,aAAcC,YAAY,SACrCI,cAAgBC,KAAKC,oBACvBtB,OACAiB,OAAOM,GACPP,WACAb,gBACAC,YAEJW,aAAaS,eAAeJ,cACvBD,YAAYJ,aAAcC,YAAY,wBAW1BD,aAAcf,OAAQyB,MAAOtB,gBAAiBC,kBACzDa,OAASF,aAAaG,IAAI,eAC3BQ,OAAOX,aAAcU,OAAO,SAC3BL,cAAgBC,KAAKC,oBACvBtB,OACAiB,OAAOM,GACPE,MACAtB,gBACAC,YAEJW,aAAaS,eAAeJ,cACvBM,OAAOX,aAAcU,OAAO,GAUrCE,KAAKZ,cAEDA,aAAaa,eAAe,CACxBC,cAAeR,KAAKS,iBAc5BA,eAAef,aAAcgB,WAAYC,eAErCA,OAAOC,QAAS,EACTD,yBAQOjB,aAAcC,kBACtBK,KAAKa,oBAAoBnB,aAAc,eAAgBC,8BAQ/CD,aAAcC,kBACtBK,KAAKa,oBAAoBnB,aAAc,eAAgBC,yBAQpDD,aAAcU,aACjBJ,KAAKc,eAAepB,aAAc,UAAWU,oBAQ1CV,aAAcU,aACjBJ,KAAKc,eAAepB,aAAc,UAAWU,uBAQvCV,aAAcU,aACpBJ,KAAKc,eAAepB,aAAc,aAAcU,yBAUxCV,aAAcU,MAAOtB,gBAAiBC,kBAC9Ca,OAASF,aAAaG,IAAI,UAE1BF,WAAa,IAAIoB,IACnBjC,gBACAa,WAAWqB,IAAIlC,iBAEfsB,MAAMa,SAASC,aACLC,GAAKzB,aAAaG,IAAI,KAAMqB,MAClCvB,WAAWqB,IAAIG,GAAGC,mBAGrBtB,YAAYJ,aAAc2B,MAAMC,KAAK3B,aAAa,SAEjDI,cAAgBC,KAAKC,oBAAoB,eAAgBL,OAAOM,GAAIE,MAAOtB,gBAAiBC,YAClGW,aAAaS,eAAeJ,cAEvBD,YAAYJ,aAAc2B,MAAMC,KAAK3B,aAAa,gBAkB9CD,aAAc6B,MAAOzC,gBAAiBC,gBAC1CD,kBAAoBC,iBACf,IAAIyC,sEAER5B,OAASF,aAAaG,IAAI,eAC3BQ,OAAOX,aAAc6B,OAAO,SAC3BxB,cAAgBC,KAAKC,oBAAoB,UAAWL,OAAOM,GAAIqB,MAAOzC,gBAAiBC,YAC7FW,aAAaS,eAAeJ,cACvBM,OAAOX,aAAc6B,OAAO,qBAUnB7B,aAAcC,WAAYb,qBACnCA,sBACK,IAAI0C,6DAER5B,OAASF,aAAaG,IAAI,eAC3BC,YAAYJ,aAAcC,YAAY,SACrCI,cAAgBC,KAAKC,oBAAoB,eAAgBL,OAAOM,GAAIP,WAAYb,iBACtFY,aAAaS,eAAeJ,cACvBD,YAAYJ,aAAcC,YAAY,oBAS9BD,aAAcZ,iBACtBA,kBACDA,gBAAkB,SAEhBc,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,cAAeL,OAAOM,GAAI,GAAIpB,iBAC7EY,aAAaS,eAAeJ,6BASZL,aAAcC,kBACxBC,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,iBAAkBL,OAAOM,GAAIP,YAC5ED,aAAaS,eAAeJ,wBAQjBL,aAAcU,aACnBR,OAASF,aAAaG,IAAI,eAC3BQ,OAAOX,aAAcU,OAAO,SAC3BL,cAAgBC,KAAKC,oBAAoB,YAAaL,OAAOM,GAAIE,YAClEC,OAAOX,aAAcU,OAAO,GACjCV,aAAaS,eAAeJ,SAUhC0B,OAAO/B,aAAcU,MAAOsB,gBACnBC,YAAYjC,mBACZkC,kBAAkBlC,aAAc,KAAMU,MAAO,WAAYsB,WAUlEG,YAAYnC,aAAcC,WAAY+B,gBAC7BC,YAAYjC,mBACZkC,kBAAkBlC,aAAc,UAAWC,WAAY,WAAY+B,WAU5EI,aAAapC,aAAcU,MAAO2B,gBACxBC,SAAYD,SAAY,EAAI,OAC7BH,kBAAkBlC,aAAc,KAAMU,MAAO,kBAAmB4B,UAUzE3B,OAAOX,aAAcU,MAAO6B,gBACnBL,kBAAkBlC,aAAc,KAAMU,MAAO,SAAU6B,WAUhEnC,YAAYJ,aAAcC,WAAYsC,gBAC7BL,kBAAkBlC,aAAc,UAAWC,WAAY,SAAUsC,WAG1EL,kBAAkBlC,aAAcwC,KAAMrD,IAAKsD,UAAWH,UAClDtC,aAAa0C,aAAY,GACzBvD,IAAIoC,SAASf,WACHmC,QAAU3C,aAAaG,IAAIqC,KAAMhC,IACnCmC,UACAA,QAAQF,WAAaH,aAG7BtC,aAAa0C,aAAY,GAqB7BT,YAAYjC,aAAc4C,KAAMpC,GAAIqC,cAC5BC,oBACSC,IAATH,OACAE,YAAc9C,aAAaG,IAAIyC,KAAMpC,KAChCsC,oBAIT9C,aAAa0C,aAAY,SAEnBxC,OAASF,aAAaG,IAAI,UAChCD,OAAO8C,SAAW,KAEdF,cACA5C,OAAO8C,SAAW,CACdxC,GAAAA,GACAoC,KAAAA,KACAK,UAAoB,WAARL,KAAqBE,YAAYtC,GAAKsC,YAAYpB,UAC9DmB,SAAAA,WAGR7C,aAAa0C,aAAY,GAQ7BQ,UAAUlD,oBACAmD,MAAQnD,aAAamD,MAC3BnD,aAAa0C,aAAY,GACzBS,MAAMC,QAAQ7B,SAAS6B,UACnBA,QAAQlC,QAAS,KAErBiC,MAAM1B,GAAGF,SAASE,KACdA,GAAGP,QAAS,KAEhBlB,aAAa0C,aAAY,+BAUD1C,aAAcC,WAAYoD,iBAC5CC,aAAehD,KAAKiD,8BAA8BvD,aAAc,iBAAkBC,WAAYoD,WAC9FnD,OAASF,aAAaG,IAAI,gBAC1BG,KAAKC,oBAAoB,0BAA2BL,OAAOM,GAAI8C,4CAU3CtD,aAAcC,WAAYoD,iBAC9CC,aAAehD,KAAKiD,8BAA8BvD,aAAc,mBAAoBC,WAAYoD,WAChGnD,OAASF,aAAaG,IAAI,gBAC1BG,KAAKC,oBAAoB,4BAA6BL,OAAOM,GAAI8C,cAY3EC,8BAA8BvD,aAAcwD,eAAgBvD,WAAYwD,iBACpEzD,aAAa0C,aAAY,SACnBgB,iBAAmB,IAAIrC,OAE7BpB,WAAWsB,SAAQ0B,kBACTG,QAAUpD,aAAaG,IAAI,UAAW8C,mBAC5BF,IAAZK,qBAGEd,SAAWmB,MAAAA,gBAAAA,gBAAmBL,QAAQI,gBACxCJ,QAAQI,iBAAmBlB,WAC3Bc,QAAQI,gBAAkBlB,SAC1BoB,iBAAiBpC,IAAI8B,QAAQ5C,QAGrCR,aAAa0C,aAAY,GACI,GAAzBgB,iBAAiBC,WACV,SAGLC,oBAAsB,UACd5D,aAAamD,MACrBC,QAAQ7B,SAAQ6B,UACdA,QAAQI,iBACRI,oBAAoBC,KAAKT,QAAQ5C,OAGlCoD,oBAWXE,WAAW9D,aAAc+D,eACfZ,MAAQnD,aAAamD,MAC3BnD,aAAa0C,aAAY,GACzBS,MAAMa,KAAKD,QAAUA,QACrBZ,MAAMa,KAAKC,aAAe,GAC1Bd,MAAMa,KAAKE,UAAY,GACvBlE,aAAa0C,aAAY,GAO7ByB,UAAUnE,oBACAmD,MAAQnD,aAAamD,MAC3BnD,aAAa0C,aAAY,GACzBS,MAAMa,KAAKC,aAAe,GAC1Bd,MAAMa,KAAKE,UAAY,GACvBlE,aAAa0C,aAAY,GAQ7B0B,SAASpE,aAAcU,YACd2D,mBAAmBrE,aAAc,KAAMU,OAQhD4D,WAAWtE,aAAcU,YAChB6D,wBAAwBvE,aAAc,KAAMU,OAQrD8D,cAAcxE,aAAcC,iBACnBoE,mBAAmBrE,aAAc,UAAWC,YAQrDwE,gBAAgBzE,aAAcC,iBACrBsE,wBAAwBvE,aAAc,UAAWC,YAS1DoE,mBAAmBrE,aAAc0E,SAAUvF,WACjC6E,KAAOhE,aAAamD,MAAMa,QAC3BA,MAAAA,OAAAA,KAAMD,cACD,IAAIjC,gCAEa,MAAvBkC,MAAAA,YAAAA,KAAMC,gBAAuBD,MAAAA,YAAAA,KAAMC,gBAAiBS,eAC9C,IAAI5C,2BAAoB4C,uCAIlCvF,IAAMA,IAAIwF,KAAIC,OAASA,MAAMC,aAE7B7E,aAAa0C,aAAY,GACzBsB,KAAKC,aAAeS,eACdI,aAAe,IAAIzD,IAAI,IAAI2C,KAAKE,aAAc/E,MACpD6E,KAAKE,UAAY,IAAIY,cACrB9E,aAAa0C,aAAY,GAY7B6B,wBAAwBvE,aAAc0E,SAAUvF,WACtC6E,KAAOhE,aAAamD,MAAMa,QAC3BA,MAAAA,OAAAA,KAAMD,cACD,IAAIjC,gCAEa,MAAvBkC,MAAAA,YAAAA,KAAMC,gBAAuBD,MAAAA,YAAAA,KAAMC,gBAAiBS,eAC9C,IAAI5C,8BAAuB4C,yCAIrCvF,IAAMA,IAAIwF,KAAIC,OAASA,MAAMC,aAE7B7E,aAAa0C,aAAY,SACnBqC,YAAc,IAAI1D,IAAIlC,KAC5B6E,KAAKE,UAAYF,KAAKE,UAAUc,QAAOC,UAAYF,YAAYG,IAAID,WACrC,IAA1BjB,KAAKE,UAAUiB,SACfnB,KAAKC,aAAe,IAExBjE,aAAa0C,aAAY,iBAUf1C,aAAc6B,YACnBlB,OAAOX,aAAc6B,OAAO,SAC3B3B,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,WAAYL,OAAOM,GAAIqB,OACtE7B,aAAaS,eAAeJ,cACvBM,OAAOX,aAAc6B,OAAO,sBAUlB7B,aAAcC,iBACxBG,YAAYJ,aAAcC,YAAY,SACrCC,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,gBAAiBL,OAAOM,GAAIP,YAC3ED,aAAaS,eAAeJ,cACvBD,YAAYJ,aAAcC,YAAY,qBAQ7BD,oBACRE,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,eAAgBL,OAAOM,IACtER,aAAaS,eAAeJ"}